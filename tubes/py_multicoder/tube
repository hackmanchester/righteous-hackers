#!/usr/bin/env python

import sys
import json
import logging

from basetube import BaseTube

logging.basicConfig(level=logging.WARN, format="%(asctime)s %(name)s %(levelname)s %(message)s")
log = logging.getLogger(__name__)



class MulticoderTube(BaseTube):
    def handle(self, message):
        payload = message['payload']
        # newPayload = self.safe_unicode(payload.encode('hex'))
        newPayload = self.hexEncode(payload, message)
        self.processing(message, "Hex", newPayload)
        
        message['payload'] = newPayload
        self.return_message(message)
    
    def hexEncode(self, msg, message):
        self.processing(message, "Hex", self.safe_unicode(msg.encode('hex', 'replace')))
        return self.bz2Encode(msg, message)+'\nLanguage: Python, Encoding: Hex, '
        #return msg+ 'Hexencoded!'
    
    def bz2Encode(self, msg, message):
        self.processing(message, "BZ2", self.safe_unicode(msg.encode('bz2_codec', 'replace')))
        return self.uuEncode(msg, message)+'BZ2, '
    
    def uuEncode(self, msg, message):
        self.processing(message, "UU", self.safe_unicode(msg.encode('uu_codec', 'replace')))
        return self.gzipEncode(msg, message)+'UU, '
    
    def gzipEncode(self, msg, message):
        self.processing(message, "Zip", self.safe_unicode(msg.encode('zlib_codec', 'replace')))
        return self.punyEncode(msg, message)+' Zip, '
    
    def punyEncode(self, msg, message):
        self.processing(message, "Punycode", self.safe_unicode(msg.encode('punycode', 'replace')))
        return msg+' Punycode.'
    
    def safe_unicode(self, obj, *args):
        try:
            return unicode(obj, *args)
        except UnicodeDecodeError:
            # obj is byte string
            ascii_text = str(obj).encode('string_escape')
            return unicode(ascii_text)

def main():
    MulticoderTube("py_multicoder").run()

if __name__ == '__main__':
    main()