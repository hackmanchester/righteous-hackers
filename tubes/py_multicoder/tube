#!/usr/bin/env python

import sys
import json
#from pyLaunchpad import launchpad
import logging

from basetube import BaseTube

logging.basicConfig(level=logging.WARN, format="%(asctime)s %(name)s %(levelname)s %(message)s")
log = logging.getLogger(__name__)


class MulticoderTube(BaseTube):
    def handle(self, message):
        payload = message['payload']
        newPayload = hexEncode(payload, message)
        
        message['payload'] = newPayload.encode('unicode_escape')
        self.return_message(message)


def main():
    MulticoderTube("py_multicoder").run()

def hexEncode(msg, message):
    self.processing(message, "Hex", msg.encode('hex'))
    return bz2Encode(msg, message)+'Hex encoded.'

def bz2Encode(msg, message):
    self.processing(message, "BZ2", msg.encode('bz2_codec'))
    return uuEncode(msg, message)+'BZ2 encoded.'

def uuEncode(msg, message):
    self.processing(message, "UU", msg.encode('uu_codec'))
    return gzipEncode(msg, message)+'UU encoded.'

def gzipEncode(msg, message):
    self.processing(message, "Zip", msg.encode('zlib_codec'))
    return punyEncode(msg, message)+'Zip encoded.'

def punyEncode(msg, message):
    self.processing(message, "Punycode", msg.encode('punycode'))
    return msg+'Punycoded.'


if __name__ == '__main__':
    main()
