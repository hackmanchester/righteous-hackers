#!/usr/bin/env python
from pyLaunchpad import launchpad
import logging
from hashlib import md5
import random
import time
from collections import defaultdict

from basetube import BaseTube

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s %(name)s %(levelname)s %(message)s")

log = logging.getLogger(__name__)


class LaunchpadTube(BaseTube):
    launchpad = None
    sleep_length = 0.05
    
    def __init__(self, *args, **kwargs):
        super(LaunchpadTube, self).__init__(*args, **kwargs)
        self.setupLaunchPad()
    
    def setupLaunchPad(self):
        launchpads = launchpad.findLaunchpads()
        log.debug("Found launchpads: %s", launchpads)
        l = launchpad.launchpad(*launchpads[-1])
        
        l.reset()
        l.setDrumRackMode()
        self.launchpad = l
        self.flashLights()
    
    def flashLights(self):
        for x in range(9):
            for y in range(9):
                self.launchpad.light(x, y, min(x/2, 3), min(y/2, 3))
        time.sleep(0.3)
        for x in range(9):
            for y in range(9):
                self.launchpad.light(x, y, min(y/2, 3), min(x/2, 3))
        time.sleep(0.3)

        for x in range(9):
            for y in range(9):
                self.launchpad.light(x, y, 3-min(x/2, 3), 3-min(y/2, 3))
        time.sleep(0.3)
        for x in range(9):
            for y in range(9):
                self.launchpad.light(x, y, 3-min(y/2, 3), 3-min(x/2, 3))
        time.sleep(0.3)
        self.launchpad.lightAllTest(0, 0)
        
        
    def handle(self, message):
        payload = message['payload']
        chars = md5(payload).hexdigest()[:16]
        self.processing(message, "MD5[:16]", chars)
        
        key = self.get_hex_digits(chars)
        key_grid = self.display_key(key)
        self.processing(message, "Key", str(key))
        log.debug(key_grid)
        self.return_message(message)
    
    def display_key(self, key):
        key_grid = defaultdict(lambda: defaultdict(bool))
        for i, c in enumerate(key):
            x = (i%4)*2
            y = (i/4)*2
            self.display_key_digit(key_grid, x, y, c)
        return key_grid
    
    def display_key_digit(self, key_grid, x, y, c):
        on_colour = (0, 3)
        off_colour = (0, 0)
        for i in range(4):
            if i == 0:
                lit = bool(c & 1)
                self.launchpad.light(x, y, *(on_colour if lit else off_colour))
                key_grid[x][y] = lit
            if i == 1:
                lit = bool(c & 2)
                self.launchpad.light(x+1, y, *(on_colour if lit else off_colour))
                key_grid[x+1][y] = lit
            if i == 2:
                lit = bool(c & 4)
                self.launchpad.light(x, y+1, *(on_colour if lit else off_colour))
                key_grid[x][y+1] = lit
            if i == 3:
                lit = bool(c & 8)
                self.launchpad.light(x+1, y+1, *(on_colour if lit else off_colour))
                key_grid[x+1][y+1] = lit
                
    
    def get_hex_digits(self, chars):
        vals = []
        for c in chars:
            vals.append(int("0x%s" % c, 16))
        return vals
    
    def tick(self):
        while True:
            event = self.launchpad.poll()
            if not event:
                break
            log.debug("Event: %s", event)
            x, y, pushed = event
            self.launchpad.light(x, y, 3 if pushed else 0, 0)


def main():
    LaunchpadTube("launchpad").run()

if __name__ == '__main__':
    main()